// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid()) @db.Uuid
  username String    @unique
  password String
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   String    @db.Uuid
  rt       Rt?       @relation(fields: [rtId], references: [id])
  rtId     String    @db.Uuid
  Expense  Expense[]
  Income   Income[]
}

model Role {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  users User[]
}

model Rt {
  id     String   @id @default(uuid()) @db.Uuid
  name   String   @unique
  users  User[]
  Member Member[]
}

model Member {
  id     String   @id @default(uuid()) @db.Uuid
  name   String   @unique
  rt     Rt       @relation(fields: [rtId], references: [id])
  rtId   String   @db.Uuid
  Income Income[]
}

model Expense {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  date      DateTime
  amount    Int
  desc      String    @db.Text
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Income {
  id        String    @id @default(uuid()) @db.Uuid
  date      DateTime
  amount    Int
  desc      String?   @db.Text
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.Uuid
  Member    Member?   @relation(fields: [memberId], references: [id])
  memberId  String?   @db.Uuid
}
